(h) introduce intermediate language
	-> easier code generation *and* better code generation would be nice
    -> better support for types: float, long, double...

(h) switch statement (basically lookupswitch insn)

(m) testing: hunit? quickcheck? other?
	-> we have `make tests' now, but it should be only considered as
	   high-level test. we need something
	-> estimated effort: for infrastructure, 2-3 days

(m) check different types (byte, long, ...)

(m) hoopl
	-> for "frontEnd analysis"
	-> transition to MIR (Mate IR)?

(l) proper java native interface (JNI)
	-> atm just hackish solution.
	-> also, arguments are passed in the wrong order
	-> estimated effort: 3-4 days

(l) classloader
	-> needed for classpath

(m) exceptions
	-> generic handler for `main'
	-> fill stacktrace... (classpath)

(l) gnu classpath integration
	-> would be awwwesome
	-> depends on: classloader, jni (nio and friends?)
	-> estimated effort: unknown

(l) improve instanceof/checkcast
	-> build something at compile-time, for faster checks at runtime

(h) bug (?): can there be a namespace clash with static and non-static methods?
	-> the signature doesn't contain the static modifier
	-> estimated effort: some hours (if a fix is needed)

(l) global map hack:
	-> it's an stupid and ugly hack. we don't want that.
	-> estimated effort: unknown. research for a solution is needed

(l) cabal file

(l) enable easy recompiliation of a method
	-> we need a map where all callers are stored
	   in order to patch those to the new address
	-> free old code region. maybe replace it with
	   some magic values, e.g. which produce a signal
	   in order to enable easier debugging

(l) get rid of trap.c
	-> it's C. we don't want that.
	-> at the moment System.Posix.Signal isn't powerful enough
	-> wait for: http://hackage.haskell.org/trac/ghc/ticket/2451

(m) benchmark for presentation

(l) get rid of missingh
	-> huge dependency and we just need one function of it

(l) get more details what takes time
	-> use Data.Time.Clock
	-> seperate analysis, jit, execution, ...
	-> maybe use ghc profiling? (it doesn't measure native execution, but well)

(l) testing
	-> specjvm98
	-> dacapo benchmark suite


(l) ... low priority
(m) ... medium priority
(h) ... high priority


what we won't do anytime soon:
( ) garbage collection
( ) thread support
( ) verifier



/* old stuff */
Design Meeting - 21.March.2012


1) Compile on Basic Blocks on Demand or complete Methods (check how cacao, mono works)
2) Calling-Conventions - Standard wegen den Spr√ºngen (why does Cacao use strange CallingConventions)
3) Capture Meta-Information by Instruction and Basics-Block
4) Benchmark Suits - what features do we need?
5) Boehm GC? using Haskell GC? From Scratch GC? GC option
6) hs-java reinschauen - kann das schon BBA


TODO: Basic-Block Analyis, Dereferencing .class file shit - during or after BBA, 
